'use strict';

// –æ–±—â–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
const config = require('config');
const CardInfo = require('card-info');

const bankUtils = require('../libs/utils');
const TelegramUsers = require('./telegram-users');

// –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Å–µ—Ç–µ–≤—ã–π –∑–∞–ø—Ä–æ—Å–æ–≤
const axios = require('axios');

// –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º
const Telegraf = require('telegraf')
const Extra = require('telegraf//extra')
const Markup = require('telegraf/markup')

class TelegramMenu {
	//=========================================================================
	constructor() {
		this.telegramUsers = new TelegramUsers();
	}

	//=========================================================================
	// –ì–õ–ê–í–ù–û–ï
	//=========================================================================
	async getMainMenu(ctx) {
		const userId = ctx.chat.id;
		const user = await this.telegramUsers.add(userId);
		if (user !== null) {
			user.cards.length = 0;
			user.activeCardId = -1;
		}

		let status = 201;
		const text = '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é';
		const btnCards		= Markup.callbackButton('üí≥ –ú–æ–∏ –∫–∞—Ä—Ç—ã', 'menuCards');
		const btnOperations = Markup.callbackButton('üí∞ –ü–ª–∞—Ç–µ–∂–∏' , 'menuPayments');
		const items = Markup.inlineKeyboard([[btnCards], [btnOperations]]).resize(false).extra();
		
		return {
			status,
			text,
			items
		};
	}


	//=========================================================================
	// –ö–ê–†–¢–´
	//=========================================================================

	async getCards(ctx) {
		const userId = ctx.chat.id;
		let status = 200;
		let error = '';
		let text = '–ú–æ–∏ –∫–∞—Ä—Ç—ã';
		let items = {};

		const user = await this.telegramUsers.add(userId);
		if (user !== null) {
			user.cards.length = 0;
			user.activeCardId = -1;
			user.paymentType = '';
		}

		let paymentMenu = '';
		const menuPaymentPos = ctx.match[0].indexOf('menuPayment');
		if (menuPaymentPos !== -1) {
			paymentMenu = ':' + ctx.match[0].substr(menuPaymentPos);
		}

		const btnMenu  = Markup.callbackButton('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' , 'menuMain');
		await axios.get(`${config.server}/cards`)
			.then(function (response) {
				status = 201;
				
				const buttons = [];
				for (let i = 0, count = response.data.length; i < count; ++i) {
					const item = response.data[i];
					const cardInfo = new CardInfo(item.cardNumber);
					const hidedNum = bankUtils.hideCardNumber(item.cardNumber, 4, 9, '*', 2);
					const caption = bankUtils.getShortName(cardInfo.bankName, 8) + ' ' + hidedNum;
					const name = `menuCards:${item.id}` + paymentMenu;
					const btn = Markup.callbackButton(caption, name);
					buttons.push([btn]);
					if (user !== null) {
						user.cards.push(item);
					}
				}
				buttons.push([btnMenu]);
				items = Markup.inlineKeyboard(buttons).resize().extra();
				
			})
			.catch(function (err) {
				status = 404;
				error = err;
			});
		return {
			status,
			text,
			items,
			error
		};
	}

	async getCardMenu(ctx, id) {
		const userId = ctx.chat.id;
		const cardId = Number(id);
		let status = 200;
		let error = '';
		let text = '–ö–∞—Ä—Ç–∞';
		let items = {};

		const user = await this.telegramUsers.get(userId);
		if (user !== null) {
			const buttons = [];
			const card = user.cards.find((item) => item.id === cardId);
			if (card !== null) {
				status = 201;
				user.activeCardId = card.id;
				const cardInfo = new CardInfo(card.cardNumber);
				text = cardInfo.bankName 
					 + '\n' + cardInfo.numberNice
					 + '\n' + cardInfo.brandAlias
					 + '\n–ë–∞–ª–∞–Ω—Å: ' + card.balance + ' —Ä—É–±';
				
				buttons.push([Markup.callbackButton('üí∞ –ü–ª–∞—Ç–µ–∂–∏' , 'menuPayments')]);
				buttons.push([Markup.callbackButton('üìÉ –ò—Å—Ç–æ—Ä–∏—è' , `menuCards:${card.id}:history`)]);
			}

			buttons.push([Markup.callbackButton('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' , 'menuMain')]);
			items = Markup.inlineKeyboard(buttons).resize().extra();
		}
		else {
			status = 404;
			error = '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';
		}
		return {
			status,
			text,
			items,
			error
		};
	}

	async getCardHistory(ctx, id) {
		const userId = ctx.chat.id;
		const cardId = Number(id);
		let status = 200;
		let error = '';
		let text = '–ò—Å—Ç–æ—Ä–∏—è –ø–æ –∫–∞—Ä—Ç–µ';
		let items = {};

		const user = await this.telegramUsers.get(userId);
		if (user !== null) {
			const buttons = [];
			const card = user.cards.find((item) => item.id === cardId);
			if (card !== null) {
				const link = `${config.server}/cards/${card.id}/transactions/`;
				await axios.get(link)
					.then(function (response) {
						status = 201;
						const maxHistory = 10;	
						const buttons = [];
						let data = [];	//—Ö—Ä–∞–Ω–∏–º –æ—Ç–≤–µ—Ç–∫—É –≤ —Ç–æ–¥–µ–ª—å–Ω–æ–º –º–∞—Å—Å–∏–≤–µ, —Ç.–∫. –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏, —á—Ç–æ –≤ –≤—ã–±–æ—Ä–∫–µ –∏–º–µ–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø—É–Ω–∫—Ç, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –Ω–µ –º–∞—Å—Å–∏–≤, –∞ —Å–∞–º –æ–±—ä–µ–∫—Ç
						if (response.data !== null && response.data !== undefined) {
							if (Object.prototype.hasOwnProperty.call(response.data, 'length')) {
								data = response.data;
							}
							else {
								data.push(response.data);
							}
						}
						for (let i = 0, count = data.length; i < count; ++i) {
							const item = data[i];
							let operation = '';
							switch(item.type) {
								case 'paymentMobile': {operation = `–û–ø–ª–∞—Ç–∞ –º–æ–±–∏–ª—å–Ω–æ–π —Å–≤—è–∑–∏\n ${item.data}`; break;}
								case 'card2Card'	: {operation = `–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É\n ${item.data}`; break;}
								case 'prepaidCard'	: {operation = `–û–ø–ª–∞—Ç–∞ —Å –∫–∞—Ä—Ç—ã\n ${item.data}`; break;}
								default 			: {operation = item.type + ', ' + item.data;}
							}
							text += '\n' + operation;
							text += `\n–°—É–º–º–∞: ${item.sum} —Ä—É–±`;
							text += `\n${item.time}\n`;
						}
						buttons.push([Markup.callbackButton('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' , 'menuMain')]);
						items = Markup.inlineKeyboard(buttons).resize().extra();	
					})
					.catch(function (err) {
						status = 404;
						error = err;
						console.log('axios catch', err);
					});
			}
		}
		else {
			status = 404;
			error = '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';
		}

		return {
			status,
			text,
			items,
			error
		};
	}


	//=========================================================================
	// –ü–õ–ê–¢–ï–ñ–ò
	//=========================================================================
	async getPayments(ctx) {
		const userId = ctx.chat.id;
		let status = 201;
		let error = '';
		const text = '–ü–ª–∞—Ç–µ–∂–∏';
		const btnPhone = Markup.callbackButton('‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω', 'menuPayments:Phone');
		const btnTrans = Markup.callbackButton('üîÉ –ü–µ—Ä–µ–≤–æ–¥', 'menuPayments:Trans');
		//const btnBack  = Markup.callbackButton('üîô ...', 'menuBack');
		const btnMenu  = Markup.callbackButton('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' , 'menuMain');
		const items = Markup.inlineKeyboard([
				[btnPhone], [btnTrans], [/*btnBack, */btnMenu]
			]).resize(false).extra();
		return {
			status,
			text,
			items,
			error
		};
	}

	async getPayment(ctx, type) {
		const userId = ctx.chat.id;
		const user = await this.telegramUsers.get(userId);
		let status = 201;
		let error = '';
		let text = '–ü–ª–∞—Ç–µ–∂–∏';
		let items = {};
		if (user !== null) {
			user.paymentType = '';
			const buttons = [];
			let card = null;
			if (user.activeCardId !== -1)
				card = user.cards.find((item) => item.id === user.activeCardId);
			if (card === null) {
				text = '–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤';
				let menuName = 'menuCards';
				if (ctx.match[0] !== '') {
					menuName += `:${-1}:${ctx.match[0]}`;	
				}
				buttons.push([Markup.callbackButton('üí≥ –ú–æ–∏ –∫–∞—Ä—Ç—ã', menuName)]);	
			}
			else {
				if (type === 'Phone') {
					user.paymentType = 'pay';
					text = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ —Å—É–º–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:';
				}
				else {
					user.paymentType = 'transfer';
					text = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∏ —Å—É–º–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:';
				}
			}
			buttons.push([Markup.callbackButton('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'menuMain')]);
			items = Markup.inlineKeyboard(buttons).resize().extra();
		}
		else {
			status = 404;
			error = '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';
		}

		return {
			status,
			text,
			items,
			error
		};
	}

	async checkCardAndSwitchPayment(ctx, id, operationData) {
		const userId = ctx.chat.id;
		const cardId = Number(id);
		const user = await this.telegramUsers.get(userId);

		let status = 200;
		let text = '';
		let error = '';
		let items = [];
		if (user !== null) {
			user.activeCardId = cardId;
			return this.getPayment(ctx, operationData);
		}
		else {
			status = 404;
			error  ='–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';
		}
		return {
			status,
			error,
			items,
			text
		};
	}

	async contractPayment(ctx) {
		const params = ctx.match[0].split(' ');
		let target = '';
		let sum = 0;
		if (params.length === 2) {
			target = params[0];
			sum = Number(params[1]); 	
		}
		if (target ==='' || sum === NaN || sum <= 0) {
			return {
				status: 401,
				error : '–í–≤–µ–¥–µ–Ω—ã –Ω–µ –≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
				items : [],
				text : ''
			};
		}


		const userId = ctx.chat.id;
		const user = await this.telegramUsers.get(userId);

		let status = 200;
		let text = '';
		let error = '';
		let items = [];
		if (user !== null) {
			let card = null;
			if (user.activeCardId !== -1)
				card = user.cards.find((item) => item.id === user.activeCardId);
			if (card !== null && user.paymentType !== '') {
				let link = `${config.server}/cards/${card.id}/${user.paymentType}`;
				let postData = {};
				if (user.paymentType === 'pay') {
					postData = {phoneNumber:target, sum:sum};
				}
				else {
					postData = {target:target, sum:sum};
				}
				await axios.post(link, postData)
					.then((response) => {
						status = 201;
						text = '–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ';
						items = Markup.inlineKeyboard([[Markup.callbackButton('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'menuMain')]]).resize().extra();
					})
					.catch((err) => {
						status = 404;
						error = err;
					});
			}
			else {
				status = 404;
				error  ='–ù–µ –≤—ã–±—Ä–∞–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞';		
			}
		}
		else {
			status = 404;
			error  ='–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';
		}
		return {
			status,
			error,
			items,
			text
		};
	}
}
module.exports = TelegramMenu;